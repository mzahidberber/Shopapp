// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using shopapp.dataaccess.Concrete.EntityFramework;

#nullable disable

namespace shopapp.dataaccess.Migrations
{
    [DbContext(typeof(ShopContext))]
    partial class ShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dell",
                            SubCategoryId = 1,
                            Url = "dell"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Asus",
                            SubCategoryId = 1,
                            Url = "asus"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lenova",
                            SubCategoryId = 2,
                            Url = "lenova"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Asus",
                            SubCategoryId = 2,
                            Url = "asus"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Casper",
                            SubCategoryId = 3,
                            Url = "casper"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Lenova",
                            SubCategoryId = 3,
                            Url = "lenova"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Lenova",
                            SubCategoryId = 4,
                            Url = "lenova"
                        },
                        new
                        {
                            Id = 8,
                            Name = "MSI",
                            SubCategoryId = 4,
                            Url = "msi"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Dell",
                            SubCategoryId = 5,
                            Url = "dell"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Samsung",
                            SubCategoryId = 5,
                            Url = "samsung"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Samsung",
                            SubCategoryId = 6,
                            Url = "samsung"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Apple",
                            SubCategoryId = 6,
                            Url = "apple"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Samsung",
                            SubCategoryId = 7,
                            Url = "samsung"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Apple",
                            SubCategoryId = 7,
                            Url = "apple"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Samsung",
                            SubCategoryId = 8,
                            Url = "samsung"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Apple",
                            SubCategoryId = 8,
                            Url = "apple"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Apple",
                            SubCategoryId = 9,
                            Url = "apple"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Lenova",
                            SubCategoryId = 9,
                            Url = "lenova"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Vestel",
                            SubCategoryId = 10,
                            Url = "vestel"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Samsung",
                            SubCategoryId = 10,
                            Url = "samsung"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Vestel",
                            SubCategoryId = 11,
                            Url = "vestel"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Samsung",
                            SubCategoryId = 11,
                            Url = "samsung"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Vestel",
                            SubCategoryId = 12,
                            Url = "vestel"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Samsung",
                            SubCategoryId = 12,
                            Url = "samsung"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Canon",
                            SubCategoryId = 13,
                            Url = "canon"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Nikon",
                            SubCategoryId = 13,
                            Url = "nikon"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Canon",
                            SubCategoryId = 14,
                            Url = "canon"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Nikon",
                            SubCategoryId = 14,
                            Url = "nikon"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Canon",
                            SubCategoryId = 15,
                            Url = "canon"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Nikon",
                            SubCategoryId = 15,
                            Url = "nikon"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Autel",
                            SubCategoryId = 16,
                            Url = "autel"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Samsung",
                            SubCategoryId = 17,
                            Url = "samsung"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Samsung",
                            SubCategoryId = 18,
                            Url = "samsung"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Apple",
                            SubCategoryId = 19,
                            Url = "apple"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MainCategoryId = 1,
                            Name = "Notebook",
                            Url = "notebook"
                        },
                        new
                        {
                            Id = 2,
                            MainCategoryId = 1,
                            Name = "Desktop Computer",
                            Url = "desktoppc"
                        },
                        new
                        {
                            Id = 3,
                            MainCategoryId = 1,
                            Name = "Game Computer",
                            Url = "desktop-game-pc"
                        },
                        new
                        {
                            Id = 4,
                            MainCategoryId = 2,
                            Name = "Mobile Phone",
                            Url = "mobilephone"
                        },
                        new
                        {
                            Id = 5,
                            MainCategoryId = 2,
                            Name = "Push Button Phone",
                            Url = "pushbuttonphone"
                        },
                        new
                        {
                            Id = 6,
                            MainCategoryId = 2,
                            Name = "Tablet",
                            Url = "tablet"
                        },
                        new
                        {
                            Id = 7,
                            MainCategoryId = 3,
                            Name = "Television",
                            Url = "television"
                        },
                        new
                        {
                            Id = 8,
                            MainCategoryId = 3,
                            Name = "Projection",
                            Url = "projection"
                        },
                        new
                        {
                            Id = 9,
                            MainCategoryId = 3,
                            Name = "SoundBar",
                            Url = "soundbar"
                        },
                        new
                        {
                            Id = 10,
                            MainCategoryId = 4,
                            Name = "Camera",
                            Url = "ccamera"
                        },
                        new
                        {
                            Id = 11,
                            MainCategoryId = 4,
                            Name = "Video Camera",
                            Url = "videocamera"
                        },
                        new
                        {
                            Id = 12,
                            MainCategoryId = 4,
                            Name = "Drone",
                            Url = "drone"
                        },
                        new
                        {
                            Id = 13,
                            MainCategoryId = 5,
                            Name = "Earphones",
                            Url = "earphones"
                        },
                        new
                        {
                            Id = 14,
                            MainCategoryId = 5,
                            Name = "Phone case",
                            Url = "phonecase"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            Url = "lenovaimg1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 1,
                            Url = "2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 2,
                            Url = "lenovaimg1.jpg"
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 2,
                            Url = "2.jpg"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.MainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Computer",
                            Url = "computer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Phone",
                            Url = "phone"
                        },
                        new
                        {
                            Id = 3,
                            Name = "TV",
                            Url = "tv"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Camera",
                            Url = "camera"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Accessory",
                            Url = "accessory"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HomeImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHome")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            Description = "Güzel laptop",
                            HomeImageUrl = "lenovaimg1.jpg",
                            IsApprove = true,
                            IsHome = true,
                            MainCategoryId = 1,
                            Name = "Dell Laptop",
                            Price = 10.0,
                            Stock = 10,
                            SubCategoryId = 1,
                            Url = "dell-laptop"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 17,
                            CategoryId = 6,
                            Description = "Güzel tablet",
                            HomeImageUrl = "2.jpg",
                            IsApprove = true,
                            IsHome = true,
                            MainCategoryId = 2,
                            Name = "Lenova Tablet",
                            Price = 101.0,
                            Stock = 11,
                            SubCategoryId = 9,
                            Url = "lenova-tablet"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Laptop",
                            Url = "laptop"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Game Notebook",
                            Url = "gamenotebook"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Name = "Desktop",
                            Url = "desktop"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Name = "Game Computer",
                            Url = "game-pc"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Name = "Computer",
                            Url = "c-game-pc"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            Name = "Smarth Phone",
                            Url = "smarthphone"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Name = "Phone",
                            Url = "m-phone"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 5,
                            Name = "Phone",
                            Url = "p-phone"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 6,
                            Name = "Tablet",
                            Url = "tablet"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 7,
                            Name = "Full HD",
                            Url = "fullhd"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 8,
                            Name = "Projection",
                            Url = "p-projection"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 9,
                            Name = "SoundBar",
                            Url = "s-soundbar"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 10,
                            Name = "Camera",
                            Url = "c-camera"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 10,
                            Name = "Vlog Camera",
                            Url = "vlogcamera"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 11,
                            Name = "Camera",
                            Url = "v-camera"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 12,
                            Name = "Drone",
                            Url = "drone"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 13,
                            Name = "Bluetooth Earphones",
                            Url = "bluetoothearphones"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 13,
                            Name = "Microphone",
                            Url = "Microphone"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 14,
                            Name = "Case",
                            Url = "case"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.SubCategoryFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("SubCategoryFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Display Card",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Processor",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Memory",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ram",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Screen Size",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Display Card",
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Processor",
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Memory",
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ram",
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Screen Size",
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 11,
                            Name = "Display Card",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 12,
                            Name = "Processor",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 13,
                            Name = "Memory",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 14,
                            Name = "Ram",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 15,
                            Name = "Screen Size",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 16,
                            Name = "Display Card",
                            SubCategoryId = 4
                        },
                        new
                        {
                            Id = 17,
                            Name = "Processor",
                            SubCategoryId = 4
                        },
                        new
                        {
                            Id = 18,
                            Name = "Memory",
                            SubCategoryId = 4
                        },
                        new
                        {
                            Id = 19,
                            Name = "Ram",
                            SubCategoryId = 4
                        },
                        new
                        {
                            Id = 20,
                            Name = "Screen Size",
                            SubCategoryId = 4
                        },
                        new
                        {
                            Id = 21,
                            Name = "Display Card",
                            SubCategoryId = 5
                        },
                        new
                        {
                            Id = 22,
                            Name = "Processor",
                            SubCategoryId = 5
                        },
                        new
                        {
                            Id = 23,
                            Name = "Memory",
                            SubCategoryId = 5
                        },
                        new
                        {
                            Id = 24,
                            Name = "Ram",
                            SubCategoryId = 5
                        },
                        new
                        {
                            Id = 25,
                            Name = "Screen Size",
                            SubCategoryId = 5
                        },
                        new
                        {
                            Id = 26,
                            Name = "Processor",
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 27,
                            Name = "Ram",
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 28,
                            Name = "Battery",
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 29,
                            Name = "Camera",
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 30,
                            Name = "Processor",
                            SubCategoryId = 7
                        },
                        new
                        {
                            Id = 31,
                            Name = "Ram",
                            SubCategoryId = 7
                        },
                        new
                        {
                            Id = 32,
                            Name = "Battery",
                            SubCategoryId = 7
                        },
                        new
                        {
                            Id = 33,
                            Name = "Camera",
                            SubCategoryId = 7
                        },
                        new
                        {
                            Id = 34,
                            Name = "Processor",
                            SubCategoryId = 8
                        },
                        new
                        {
                            Id = 35,
                            Name = "Ram",
                            SubCategoryId = 8
                        },
                        new
                        {
                            Id = 36,
                            Name = "Battery",
                            SubCategoryId = 8
                        },
                        new
                        {
                            Id = 37,
                            Name = "Camera",
                            SubCategoryId = 8
                        },
                        new
                        {
                            Id = 38,
                            Name = "Processor",
                            SubCategoryId = 9
                        },
                        new
                        {
                            Id = 39,
                            Name = "Ram",
                            SubCategoryId = 9
                        },
                        new
                        {
                            Id = 40,
                            Name = "Battery",
                            SubCategoryId = 9
                        },
                        new
                        {
                            Id = 41,
                            Name = "Camera",
                            SubCategoryId = 9
                        },
                        new
                        {
                            Id = 42,
                            Name = "Screen Size",
                            SubCategoryId = 10
                        },
                        new
                        {
                            Id = 43,
                            Name = "Resolution",
                            SubCategoryId = 10
                        },
                        new
                        {
                            Id = 44,
                            Name = "Screen Size",
                            SubCategoryId = 11
                        },
                        new
                        {
                            Id = 45,
                            Name = "Resolution",
                            SubCategoryId = 11
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.SubCategoryFeatureValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryFeatureId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SubCategoryFeatureId");

                    b.ToTable("SubCategoryFeatureValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            SubCategoryFeatureId = 1,
                            Value = "GTX 3060"
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 1,
                            SubCategoryFeatureId = 2,
                            Value = "Intel i7"
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 1,
                            SubCategoryFeatureId = 3,
                            Value = "1 TB HDD"
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 1,
                            SubCategoryFeatureId = 4,
                            Value = "32 GB"
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 1,
                            SubCategoryFeatureId = 5,
                            Value = "18 Inc"
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 2,
                            SubCategoryFeatureId = 26,
                            Value = "Intel i7"
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 2,
                            SubCategoryFeatureId = 27,
                            Value = "16 GB"
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 2,
                            SubCategoryFeatureId = 28,
                            Value = "3046 mAh"
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 2,
                            SubCategoryFeatureId = 29,
                            Value = "12 MP"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38c142a2-4b03-4eca-a964-7f8f7bb024d7",
                            Email = "adminuser@shopapp.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMİNUSER@SHOPAPP.COM",
                            NormalizedUserName = "ADMİN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBjromk1G5pbwbysNbD8NLGGhD620QGt5q/l3zqqZPDlbRl78Ljooh+EDBi7YDtHYA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "053cd56b-62d5-4d3e-8620-f171fef95355",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMİN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopapp.core.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Brand", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.SubCategory", "SubCategory")
                        .WithMany("Brands")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopapp.core.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Category", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.MainCategory", "MainCategory")
                        .WithMany("Categories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Image", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Order", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Product", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopapp.core.Entity.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopapp.core.Entity.Concrete.MainCategory", "MainCategory")
                        .WithMany("Products")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopapp.core.Entity.Concrete.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId");

                    b.HasOne("shopapp.core.Entity.Concrete.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("MainCategory");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.SubCategory", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.SubCategoryFeature", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.SubCategory", "SubCategory")
                        .WithMany("SubCategoryFeatures")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.SubCategoryFeatureValue", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.Product", "Product")
                        .WithMany("SubCategoryFeatureValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopapp.core.Entity.Concrete.SubCategoryFeature", "SubCategoryFeature")
                        .WithMany("SubCategoryFeatureValues")
                        .HasForeignKey("SubCategoryFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SubCategoryFeature");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.MainCategory", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("SubCategoryFeatureValues");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.SubCategory", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("Products");

                    b.Navigation("SubCategoryFeatures");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.SubCategoryFeature", b =>
                {
                    b.Navigation("SubCategoryFeatureValues");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
