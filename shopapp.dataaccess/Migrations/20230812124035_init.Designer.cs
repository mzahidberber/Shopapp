// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using shopapp.dataaccess.Concrete.EntityFramework;

#nullable disable

namespace shopapp.dataaccess.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20230812124035_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Dell",
                            Url = "dell"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Asus",
                            Url = "asus"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Name = "Dell",
                            Url = "dell"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Name = "Asus",
                            Url = "asus"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Name = "Samsung",
                            Url = "samsung"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Name = "Apple",
                            Url = "apple"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Name = "Apple",
                            Url = "apple"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Name = "Lenova",
                            Url = "lenova"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            Name = "Vestel",
                            Url = "vestel"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Name = "Samsung",
                            Url = "samsung"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MainCategoryId = 1,
                            Name = "Notebook",
                            Url = "notebook"
                        },
                        new
                        {
                            Id = 2,
                            MainCategoryId = 1,
                            Name = "Masaüstü Bilgisayar",
                            Url = "masaustupc"
                        },
                        new
                        {
                            Id = 3,
                            MainCategoryId = 2,
                            Name = "Cep Telefonu",
                            Url = "ceptelefonu"
                        },
                        new
                        {
                            Id = 4,
                            MainCategoryId = 2,
                            Name = "Tablet",
                            Url = "tablet"
                        },
                        new
                        {
                            Id = 5,
                            MainCategoryId = 3,
                            Name = "Televizyon",
                            Url = "televizyon"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.CategoryFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Ekran Kartı"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "İşlemci"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Name = "İşlemci"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Name = "Ekran Kartı"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Name = "Kamera"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Name = "Hafıza"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Name = "İşlemci"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Name = "Ekran Kartı"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            Name = "Ekran Boyutu"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Name = "Çözünürlük"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.CategoryFeatureValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryFeatureId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryFeatureId");

                    b.HasIndex("ProductId");

                    b.ToTable("CategoryFeatureValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryFeatureId = 1,
                            ProductId = 1,
                            Value = "GTX 3060"
                        },
                        new
                        {
                            Id = 2,
                            CategoryFeatureId = 2,
                            ProductId = 1,
                            Value = "Intel i7"
                        },
                        new
                        {
                            Id = 3,
                            CategoryFeatureId = 7,
                            ProductId = 2,
                            Value = "Intel i7"
                        },
                        new
                        {
                            Id = 4,
                            CategoryFeatureId = 8,
                            ProductId = 2,
                            Value = "GT 360"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.MainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bilgisayar",
                            Url = "bilgisayar"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Telefon",
                            Url = "telefon"
                        },
                        new
                        {
                            Id = 3,
                            Name = "TV",
                            Url = "tv"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HomeImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsApprove")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHome")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("OrderId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            Description = "Güzel laptop",
                            HomeImageUrl = "1.jpg",
                            IsApprove = false,
                            IsHome = false,
                            MainCategoryId = 1,
                            Name = "Dell Laptop",
                            Price = 10.0,
                            Stock = 1,
                            Url = "dell-laptop"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 8,
                            CategoryId = 4,
                            Description = "Güzel tablet",
                            HomeImageUrl = "2.jpg",
                            IsApprove = false,
                            IsHome = false,
                            MainCategoryId = 2,
                            Name = "Lenova Tablet",
                            Price = 101.0,
                            Stock = 2,
                            Url = "lenova-tablet"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee7ade70-ff0c-4803-af56-9459abdf5781",
                            Email = "adminuser@shopapp.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMİNUSER@SHOPAPP.COM",
                            NormalizedUserName = "ADMİN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFklyAbz3i4+xn5a/WbG42MUV//9G40lXVq7tia9+bau3aeLkt3H0MVtcS+Fb1JxQg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "01e2d067-6094-43c8-8fef-ef317b87053a",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMİN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopapp.core.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Brand", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.Category", "Category")
                        .WithMany("Brands")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopapp.core.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Category", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.MainCategory", "MainCategory")
                        .WithMany("Categories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.CategoryFeature", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.Category", "Category")
                        .WithMany("CategoryFeatures")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.CategoryFeatureValue", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.CategoryFeature", "CategoryFeature")
                        .WithMany("CategoryFeatureValues")
                        .HasForeignKey("CategoryFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopapp.core.Entity.Concrete.Product", "Product")
                        .WithMany("CategoryFeatureValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryFeature");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Image", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Order", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Product", b =>
                {
                    b.HasOne("shopapp.core.Entity.Concrete.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopapp.core.Entity.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopapp.core.Entity.Concrete.MainCategory", "MainCategory")
                        .WithMany("Products")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("shopapp.core.Entity.Concrete.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Category", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("CategoryFeatures");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.CategoryFeature", b =>
                {
                    b.Navigation("CategoryFeatureValues");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.MainCategory", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Order", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.Product", b =>
                {
                    b.Navigation("CategoryFeatureValues");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("shopapp.core.Entity.Concrete.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
